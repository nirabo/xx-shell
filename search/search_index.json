{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to XX Shell Documentation","text":"<p>{ width=\"200\" }</p> <p>XX Shell is a powerful command-line interface with advanced features for...</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation</li> <li>Configuration</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Command System:</li> <li>Plugin Architecture:</li> <li>Session Management:</li> </ul> <pre><code>:hidden:\ngetting-started/installation\ngetting-started/configuration\ncommands/index\ndevelopment/setup\napi/core\n</code></pre>"},{"location":"features/","title":"XX Shell Features","text":""},{"location":"features/#intelligent-command-interpretation","title":"Intelligent Command Interpretation","text":"<ul> <li>Translates natural language into shell commands</li> <li>Handles complex command chaining and pipelines</li> <li>Suggests optimized command alternatives</li> <li>Provides real-time feedback and confirmation</li> </ul>"},{"location":"features/#comprehensive-command-recording","title":"Comprehensive Command Recording","text":"<ul> <li>Logs all commands and their outputs</li> <li>Stores metadata (timestamp, working directory, environment)</li> <li>Maintains command context for better suggestions</li> <li>Enables post-execution analysis</li> </ul>"},{"location":"features/#execution-environment","title":"Execution Environment","text":"<ul> <li>Works with existing shell environments (bash, zsh, fish)</li> <li>Maintains full shell functionality</li> <li>Preserves existing aliases and configurations</li> <li>Operates transparently with minimal overhead</li> </ul>"},{"location":"features/#analysis-tools","title":"Analysis Tools","text":"<ul> <li>Command usage statistics</li> <li>Performance optimization suggestions</li> <li>Common mistake detection</li> <li>Automated documentation generation</li> </ul>"},{"location":"features/#ai-powered-assistance","title":"AI-Powered Assistance","text":"<ul> <li>Context-aware command suggestions</li> <li>Natural language processing for commands</li> <li>Intelligent error correction and guidance</li> </ul>"},{"location":"features/#extensible-architecture","title":"Extensible Architecture","text":"<ul> <li>Plugin system for custom functionality</li> <li>Integrated package management</li> <li>Cross-platform compatibility</li> </ul>"},{"location":"features/#mcp-integration","title":"MCP Integration","text":"<ul> <li>Native support for Model Context Protocol</li> <li>Seamless LLM integration</li> <li>Standardized access to data sources and tools</li> </ul>"},{"location":"api/core/","title":"Core API Reference","text":""},{"location":"api/core/#classes","title":"Classes","text":""},{"location":"api/core/#shell","title":"Shell","text":"<p>Main shell class implementing core functionality</p> <pre><code>class Shell:\n    def __init__(self, config: dict = None):\n        \"\"\"Initialize shell with optional configuration\"\"\"\n\n    def run(self, command: str) -&gt; str:\n        \"\"\"Execute a shell command\"\"\"\n</code></pre>"},{"location":"api/core/#command","title":"Command","text":"<p>Base command class for implementing commands</p> <pre><code>class Command:\n    def __init__(self, name: str, help_text: str):\n        \"\"\"Initialize command with name and help text\"\"\"\n\n    def execute(self, args: list) -&gt; str:\n        \"\"\"Execute command with provided arguments\"\"\"\n</code></pre>"},{"location":"api/core/#functions","title":"Functions","text":""},{"location":"api/core/#parse_command","title":"parse_command","text":"<p>Parse input command string</p> <pre><code>def parse_command(input: str) -&gt; tuple[str, list]:\n    \"\"\"Parse command string into command name and arguments\"\"\"\n</code></pre>"},{"location":"api/core/#format_output","title":"format_output","text":"<p>Format command output</p> <pre><code>def format_output(output: str, style: str = \"plain\") -&gt; str:\n    \"\"\"Format command output with specified style\"\"\"\n</code></pre>"},{"location":"api/plugins/","title":"Plugin API Reference","text":""},{"location":"api/plugins/#classes","title":"Classes","text":""},{"location":"api/plugins/#plugin","title":"Plugin","text":"<p>Base plugin class</p> <pre><code>class Plugin:\n    def __init__(self, name: str, version: str):\n        \"\"\"Initialize plugin with name and version\"\"\"\n\n    def register_commands(self) -&gt; list[Command]:\n        \"\"\"Register plugin commands\"\"\"\n\n    def on_load(self):\n        \"\"\"Called when plugin is loaded\"\"\"\n</code></pre>"},{"location":"api/plugins/#pluginmanager","title":"PluginManager","text":"<p>Manage plugin lifecycle</p> <pre><code>class PluginManager:\n    def __init__(self, shell: Shell):\n        \"\"\"Initialize with reference to shell instance\"\"\"\n\n    def load_plugin(self, plugin_path: str):\n        \"\"\"Load plugin from specified path\"\"\"\n\n    def unload_plugin(self, plugin_name: str):\n        \"\"\"Unload plugin by name\"\"\"\n</code></pre>"},{"location":"api/plugins/#functions","title":"Functions","text":""},{"location":"api/plugins/#discover_plugins","title":"discover_plugins","text":"<p>Discover available plugins</p> <pre><code>def discover_plugins() -&gt; list[str]:\n    \"\"\"Find available plugins in plugin directories\"\"\"\n</code></pre>"},{"location":"api/plugins/#validate_plugin","title":"validate_plugin","text":"<p>Validate plugin metadata</p> <pre><code>def validate_plugin(plugin: Plugin) -&gt; bool:\n    \"\"\"Validate plugin implementation\"\"\"\n</code></pre>"},{"location":"api/session/","title":"Session API Reference","text":""},{"location":"api/session/#classes","title":"Classes","text":""},{"location":"api/session/#session","title":"Session","text":"<p>Manage shell session state</p> <pre><code>class Session:\n    def __init__(self, session_id: str):\n        \"\"\"Initialize session with unique ID\"\"\"\n\n    def add_command(self, command: str, output: str) -&gt; None:\n        \"\"\"Add command to history with metadata\n        Args:\n            command: The executed command string\n            output: The command's output\n        \"\"\"\n\n    def save(self, path: str):\n        \"\"\"Save session state to file\"\"\"\n\n    def load(self, path: str):\n        \"\"\"Load session state from file\"\"\"\n</code></pre>"},{"location":"api/session/#sessionmanager","title":"SessionManager","text":"<p>Manage multiple sessions</p> <pre><code>class SessionManager:\n    def __init__(self):\n        \"\"\"Initialize session manager\"\"\"\n\n    def create_session(self) -&gt; Session:\n        \"\"\"Create new session\"\"\"\n\n    def get_session(self, session_id: str) -&gt; Session:\n        \"\"\"Get session by ID\"\"\"\n</code></pre>"},{"location":"api/session/#command-history-structure","title":"Command History Structure","text":"<p>Command history is stored as a list of dictionaries with the following structure: <pre><code>{\n    \"command\": str,  # The executed command\n    \"output\": str,   # Command output\n    \"timestamp\": str # ISO format timestamp\n}\n</code></pre></p>"},{"location":"assets/prompts/logo_flux.1-dev/","title":"Logo flux.1 dev","text":"<p>Visual Concept: - Two bold \"X\" characters styled as sleek, modern shapes (possibly with a gradient or metallic finish) placed side by side to form XX. - Below or beside the XX, incorporate a stylized shell shape (e.g., a conch shell, a command prompt symbol like <code>&gt;_</code>, or a terminal window outline) to reference the shell environment. - The XX can be futuristic and tech-forward, using geometric fonts or slightly tilted to suggest motion and modernity.</p>"},{"location":"commands/","title":"Command Reference","text":"<p>This section documents all available commands in XX Shell, organized by category.</p>"},{"location":"commands/#core-commands","title":"Core Commands","text":"<p>Essential commands for shell operation: - <code>help</code> - Show command help - <code>exit</code> - Exit the shell - <code>version</code> - Show version information - <code>config</code> - Manage shell configuration</p>"},{"location":"commands/#plugin-commands","title":"Plugin Commands","text":"<p>Commands provided by installed plugins: - <code>plugin list</code> - List installed plugins - <code>plugin install</code> - Install new plugins - <code>plugin remove</code> - Remove installed plugins</p>"},{"location":"commands/#navigation","title":"Navigation","text":"<ul> <li>Core Commands</li> <li>Plugin Commands</li> </ul>"},{"location":"commands/core/","title":"Core Commands","text":""},{"location":"commands/core/#help","title":"help","text":"<p>Show help information for commands</p> <p>Usage: <pre><code>help [command]\n</code></pre></p>"},{"location":"commands/core/#exit","title":"exit","text":"<p>Exit the shell</p> <p>Usage: <pre><code>exit\n</code></pre></p>"},{"location":"commands/core/#version","title":"version","text":"<p>Show version information</p> <p>Usage: <pre><code>version\n</code></pre></p>"},{"location":"commands/core/#config","title":"config","text":"<p>Manage shell configuration</p> <p>Usage: <pre><code>config [get|set|list] [key] [value]\n</code></pre></p>"},{"location":"commands/plugins/","title":"Plugin Commands","text":""},{"location":"commands/plugins/#plugin-list","title":"plugin list","text":"<p>List installed plugins</p> <p>Usage: <pre><code>plugin list\n</code></pre></p>"},{"location":"commands/plugins/#plugin-install","title":"plugin install","text":"<p>Install new plugins</p> <p>Usage: <pre><code>plugin install &lt;plugin_name&gt;\n</code></pre></p>"},{"location":"commands/plugins/#plugin-remove","title":"plugin remove","text":"<p>Remove installed plugins</p> <p>Usage: <pre><code>plugin remove &lt;plugin_name&gt;\n</code></pre></p>"},{"location":"development/contributing/","title":"Contributing Guide","text":""},{"location":"development/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork:    <pre><code>git clone https://github.com/YOUR-USERNAME/xx-shell.git\n</code></pre></li> <li>Create a feature branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Install pre-commit hooks:    <pre><code>pre-commit install\n</code></pre></li> <li>Make your changes following the coding conventions</li> <li>Run tests:    <pre><code>pytest\n</code></pre></li> <li>Commit your changes using conventional commits:    <pre><code>git commit -m \"feat: add new feature\"\ngit commit -m \"fix: resolve issue with X\"\ngit commit -m \"docs: update contributing guide\"\n</code></pre></li> </ol>"},{"location":"development/contributing/#quality-assurance","title":"Quality Assurance","text":"<ol> <li>Testing Strategy</li> <li>Unit tests for core components</li> <li>Integration tests for command execution</li> <li> <p>End-to-end tests for user workflows</p> </li> <li> <p>Code Quality</p> </li> <li>Implement linting</li> <li>Enforce code style</li> <li> <p>Maintain test coverage</p> </li> <li> <p>Documentation</p> </li> <li>Keep documentation updated</li> <li>Generate API documentation</li> <li>Maintain changelog</li> </ol>"},{"location":"development/contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li>Push your branch:    <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Create a pull request</li> <li>Include:</li> <li>Description of changes</li> <li>Related issue number (if applicable)</li> <li>Test coverage information</li> <li>Documentation updates</li> </ol>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 with 100 character line length</li> <li>Use type hints for all public APIs</li> <li>Include docstrings in Google style format</li> <li>Write tests for all new features</li> </ul>"},{"location":"development/contributing/#issue-reporting","title":"Issue Reporting","text":"<ul> <li>Use the issue template</li> <li>Include:</li> <li>Steps to reproduce</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Environment details</li> </ul>"},{"location":"development/setup/","title":"Development Setup","text":""},{"location":"development/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>UV package manager</li> <li>Git</li> </ul>"},{"location":"development/setup/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/your-org/xx-shell.git\ncd xx-shell\n</code></pre></p> </li> <li> <p>Create virtual environment:    <pre><code>uv venv .venv\n</code></pre></p> </li> <li> <p>Activate environment:    <pre><code>source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>uv pip install -r requirements.txt -r requirements-dev.txt\n</code></pre></p> </li> </ol>"},{"location":"development/setup/#development-tools","title":"Development Tools","text":"<ul> <li>Formatting: <code>black</code> and <code>isort</code></li> <li>Linting: <code>flake8</code></li> <li>Type checking: <code>mypy</code></li> <li>Testing: <code>pytest</code></li> </ul>"},{"location":"development/setup/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Install pre-commit hooks: <pre><code>pre-commit install\n</code></pre></p>"},{"location":"development/setup/#running-tests","title":"Running Tests","text":"<p>Run all tests: <pre><code>pytest\n</code></pre></p> <p>Run tests with coverage: <pre><code>pytest --cov\n</code></pre></p>"},{"location":"development/setup/#development-roadmap","title":"Development Roadmap","text":""},{"location":"development/setup/#phase-1-core-functionality-2-weeks","title":"Phase 1: Core Functionality (2 weeks)","text":"<ul> <li>Basic command interpreter</li> <li>Execution layer</li> <li>Data storage</li> </ul>"},{"location":"development/setup/#phase-2-advanced-features-3-weeks","title":"Phase 2: Advanced Features (3 weeks)","text":"<ul> <li>Command optimization</li> <li>Context management</li> <li>User interface</li> </ul>"},{"location":"development/setup/#phase-3-ecosystem-integration-2-weeks","title":"Phase 3: Ecosystem Integration (2 weeks)","text":"<ul> <li>Plugin system</li> <li>Cross-platform support</li> <li>Documentation</li> </ul>"},{"location":"development/testing/","title":"Testing Guide","text":""},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<ul> <li>Unit tests in <code>tests/unit/</code></li> <li>Integration tests in <code>tests/integration/</code></li> <li>End-to-end tests in <code>tests/e2e/</code></li> </ul>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":"<p>Run all tests: <pre><code>pytest\n</code></pre></p> <p>Run specific test category: <pre><code>pytest tests/unit/\npytest tests/integration/\npytest tests/e2e/\n</code></pre></p>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>Generate coverage report: <pre><code>pytest --cov\n</code></pre></p> <p>View HTML coverage report: <pre><code>pytest --cov --cov-report=html\n</code></pre></p>"},{"location":"development/testing/#parallel-testing","title":"Parallel Testing","text":"<p>Run tests in parallel: <pre><code>pytest -n auto\n</code></pre></p>"},{"location":"development/testing/#common-test-patterns","title":"Common Test Patterns","text":""},{"location":"development/testing/#testing-session-management","title":"Testing Session Management","text":"<p>When testing session functionality, verify the command history structure:</p> <pre><code>def test_session_history(session):\n    session.add_command(\"ls -la\", \"output\")\n    history = session.command_history\n\n    assert len(history) == 1\n    assert history[0][\"command\"] == \"ls -la\"\n    assert history[0][\"output\"] == \"output\"\n    assert \"timestamp\" in history[0]\n</code></pre>"},{"location":"development/testing/#testing-persistence","title":"Testing Persistence","text":"<p>When testing session persistence, verify the complete round-trip:</p> <pre><code>def test_session_persistence(session_manager):\n    # Create and save session\n    session = session_manager.create_session()\n    session.add_command(\"cmd\", \"output\")\n    session_manager.save_session(session)\n\n    # Load and verify\n    loaded = session_manager.load_session(session.session_id)\n    assert loaded.command_history[0][\"command\"] == \"cmd\"\n    assert loaded.command_history[0][\"output\"] == \"output\"\n</code></pre>"},{"location":"development/testing/#mocking","title":"Mocking","text":"<p>Use pytest-mock for mocking: <pre><code>def test_something(mocker):\n    mock_func = mocker.patch('module.function')\n    # test code\n</code></pre></p>"},{"location":"development/testing/#async-tests","title":"Async Tests","text":"<p>Use pytest-asyncio for async tests: <pre><code>@pytest.mark.asyncio\nasync def test_async_function():\n    result = await async_function()\n    assert result == expected\n</code></pre></p>"},{"location":"development/testing/#test-configuration","title":"Test Configuration","text":"<ul> <li>Configured in <code>pytest.ini</code></li> <li>Includes default markers and options</li> <li>Supports parallel execution</li> </ul>"},{"location":"development/testing_strategy/","title":"Testing Strategy for XX Shell","text":""},{"location":"development/testing_strategy/#overview","title":"Overview","text":"<p>This document outlines the comprehensive testing strategy for XX Shell, an intelligent command shell with AI capabilities. The strategy combines automated and manual testing approaches to ensure high quality and reliability.</p>"},{"location":"development/testing_strategy/#test-levels","title":"Test Levels","text":""},{"location":"development/testing_strategy/#unit-testing","title":"Unit Testing","text":"<ul> <li>Scope: Individual components and classes</li> <li>Tools: pytest</li> <li>Coverage: Core functionality (shell, session management, plugins)</li> <li>Location: <code>tests/unit/</code></li> </ul>"},{"location":"development/testing_strategy/#integration-testing","title":"Integration Testing","text":"<ul> <li>Scope: Interaction between components</li> <li>Tools: pytest with fixtures</li> <li>Coverage: Plugin integration, session persistence, command execution</li> <li>Location: <code>tests/integration/</code></li> </ul>"},{"location":"development/testing_strategy/#system-testing","title":"System Testing","text":"<ul> <li>Scope: End-to-end functionality</li> <li>Tools: pytest with subprocess</li> <li>Coverage: CLI behavior, error handling, user workflows</li> <li>Location: <code>tests/system/</code></li> </ul>"},{"location":"development/testing_strategy/#acceptance-testing","title":"Acceptance Testing","text":"<ul> <li>Scope: User acceptance criteria</li> <li>Tools: Manual testing, user scenarios</li> <li>Coverage: Key user journeys, usability</li> <li>Location: Manual test cases</li> </ul>"},{"location":"development/testing_strategy/#test-types","title":"Test Types","text":""},{"location":"development/testing_strategy/#functional-testing","title":"Functional Testing","text":"<ul> <li>Command parsing and execution</li> <li>Session management</li> <li>Plugin system functionality</li> <li>MCP integration</li> </ul>"},{"location":"development/testing_strategy/#performance-testing","title":"Performance Testing","text":"<ul> <li>Command execution speed</li> <li>Session loading times</li> <li>Memory usage under load</li> </ul>"},{"location":"development/testing_strategy/#security-testing","title":"Security Testing","text":"<ul> <li>Session data protection</li> <li>Command injection prevention</li> <li>Plugin sandboxing</li> </ul>"},{"location":"development/testing_strategy/#compatibility-testing","title":"Compatibility Testing","text":"<ul> <li>Cross-platform support (Linux, macOS, Windows)</li> <li>Shell compatibility (bash, zsh, fish)</li> <li>Python version support</li> </ul>"},{"location":"development/testing_strategy/#test-environments","title":"Test Environments","text":""},{"location":"development/testing_strategy/#development","title":"Development","text":"<ul> <li>Local machines with virtualenv</li> <li>Python 3.11+</li> <li>Supported shells installed</li> </ul>"},{"location":"development/testing_strategy/#cicd","title":"CI/CD","text":"<ul> <li>GitHub Actions with matrix testing</li> <li>Multiple OS environments</li> <li>Dependency isolation</li> </ul>"},{"location":"development/testing_strategy/#production-like","title":"Production-like","text":"<ul> <li>Docker containers</li> <li>Staging servers</li> <li>Real-world shell configurations</li> </ul>"},{"location":"development/testing_strategy/#test-automation","title":"Test Automation","text":""},{"location":"development/testing_strategy/#tools","title":"Tools","text":"<ul> <li>pytest for test execution</li> <li>coverage.py for code coverage</li> <li>mypy for type checking</li> <li>flake8 for linting</li> </ul>"},{"location":"development/testing_strategy/#automation-scope","title":"Automation Scope","text":"<ul> <li>Unit and integration tests</li> <li>Code quality checks</li> <li>Documentation validation</li> <li>Release validation</li> </ul>"},{"location":"development/testing_strategy/#maintenance","title":"Maintenance","text":"<ul> <li>Test case version control</li> <li>Regular test reviews</li> <li>CI/CD pipeline monitoring</li> </ul>"},{"location":"development/testing_strategy/#test-plan-and-coverage","title":"Test Plan and Coverage","text":""},{"location":"development/testing_strategy/#test-case-design","title":"Test Case Design","text":"<ul> <li>Positive and negative scenarios</li> <li>Boundary value analysis</li> <li>Error handling verification</li> <li>Performance benchmarks</li> </ul>"},{"location":"development/testing_strategy/#coverage-metrics","title":"Coverage Metrics","text":"<ul> <li>Code coverage &gt; 90%</li> <li>Requirement coverage 100%</li> <li>Risk-based test prioritization</li> </ul>"},{"location":"development/testing_strategy/#bug-management","title":"Bug Management","text":""},{"location":"development/testing_strategy/#tracking","title":"Tracking","text":"<ul> <li>GitHub Issues for defect tracking</li> <li>Labels for priority and severity</li> <li>Milestones for release tracking</li> </ul>"},{"location":"development/testing_strategy/#triage-process","title":"Triage Process","text":"<ol> <li>Bug report creation</li> <li>Initial assessment</li> <li>Priority assignment</li> <li>Fix implementation</li> <li>Verification testing</li> </ol>"},{"location":"development/testing_strategy/#roles-and-responsibilities","title":"Roles and Responsibilities","text":""},{"location":"development/testing_strategy/#development-team","title":"Development Team","text":"<ul> <li>Write unit tests</li> <li>Fix reported bugs</li> <li>Maintain test infrastructure</li> </ul>"},{"location":"development/testing_strategy/#qa-team","title":"QA Team","text":"<ul> <li>Design test cases</li> <li>Execute manual tests</li> <li>Report and verify bugs</li> </ul>"},{"location":"development/testing_strategy/#product-owners","title":"Product Owners","text":"<ul> <li>Define acceptance criteria</li> <li>Prioritize test coverage</li> <li>Approve releases</li> </ul>"},{"location":"development/testing_strategy/#reporting-and-metrics","title":"Reporting and Metrics","text":""},{"location":"development/testing_strategy/#key-metrics","title":"Key Metrics","text":"<ul> <li>Test execution rate</li> <li>Defect detection rate</li> <li>Test coverage percentage</li> <li>Mean time to repair</li> </ul>"},{"location":"development/testing_strategy/#reporting","title":"Reporting","text":"<ul> <li>Daily test execution reports</li> <li>Weekly quality metrics</li> <li>Release readiness reports</li> </ul>"},{"location":"development/testing_strategy/#risk-assessment","title":"Risk Assessment","text":""},{"location":"development/testing_strategy/#identified-risks","title":"Identified Risks","text":"<ol> <li>Incomplete test coverage</li> <li>Performance bottlenecks</li> <li>Security vulnerabilities</li> <li>Cross-platform issues</li> </ol>"},{"location":"development/testing_strategy/#mitigation-strategies","title":"Mitigation Strategies","text":"<ul> <li>Regular code reviews</li> <li>Automated security scans</li> <li>Performance profiling</li> <li>Continuous integration</li> </ul>"},{"location":"development/testing_strategy/#schedule-and-timeline","title":"Schedule and Timeline","text":""},{"location":"development/testing_strategy/#phase-1-core-functionality-2-weeks","title":"Phase 1: Core Functionality (2 weeks)","text":"<ul> <li>Unit test framework setup</li> <li>Core component testing</li> <li>Basic CI/CD pipeline</li> </ul>"},{"location":"development/testing_strategy/#phase-2-integration-testing-3-weeks","title":"Phase 2: Integration Testing (3 weeks)","text":"<ul> <li>Plugin system testing</li> <li>Session management tests</li> <li>MCP integration tests</li> </ul>"},{"location":"development/testing_strategy/#phase-3-system-testing-2-weeks","title":"Phase 3: System Testing (2 weeks)","text":"<ul> <li>End-to-end scenarios</li> <li>Performance benchmarks</li> <li>Security validation</li> </ul>"},{"location":"development/testing_strategy/#phase-4-maintenance-ongoing","title":"Phase 4: Maintenance (Ongoing)","text":"<ul> <li>Test case updates</li> <li>Bug fix verification</li> <li>Regression testing</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":""},{"location":"getting-started/configuration/#configuration-files","title":"Configuration Files","text":"<p>XX Shell uses the following configuration files: - <code>~/.xx/config.yaml</code>: Main configuration file - <code>~/.xx/plugins/</code>: Directory for plugin configurations - <code>~/.xx/sessions/</code>: Directory for session files</p>"},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":"<p>Example configuration file: <pre><code># ~/.xx/config.yaml\ncore:\n  prompt: \"xx&gt; \"\n  history_size: 1000\n  auto_update: true\n\nui:\n  theme: dark\n  syntax_highlighting: true\n  show_line_numbers: true\n\nplugins:\n  enabled:\n    - mcp\n    - git\n    - docker\n</code></pre></p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>You can override configuration settings using environment variables: - <code>XX_PROMPT</code>: Override the shell prompt - <code>XX_THEME</code>: Set the UI theme (light/dark) - <code>XX_HISTORY_SIZE</code>: Set command history size - <code>XX_AUTO_UPDATE</code>: Enable/disable auto-update</p>"},{"location":"getting-started/configuration/#plugin-configuration","title":"Plugin Configuration","text":"<p>Each plugin can have its own configuration file: <pre><code># ~/.xx/plugins/mcp.yaml\nmcp:\n  servers:\n    - name: local\n      url: http://localhost:8000\n    - name: production\n      url: https://mcp.example.com\n</code></pre></p>"},{"location":"getting-started/configuration/#session-configuration","title":"Session Configuration","text":"<p>Session-specific settings can be stored in session files: <pre><code># ~/.xx/sessions/default.yaml\nenvironment:\n  variables:\n    API_KEY: \"your-api-key\"\n  working_directory: \"/projects/my-project\"\n</code></pre></p>"},{"location":"getting-started/configuration/#reloading-configuration","title":"Reloading Configuration","text":"<p>To reload configuration without restarting: <pre><code>xx-shell config reload\n</code></pre></p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip or uv package manager</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install xx-shell\n</code></pre>"},{"location":"getting-started/installation/#using-uv","title":"Using uv","text":"<pre><code>uv pip install xx-shell\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/your-org/xx-shell.git\ncd xx-shell\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>uv pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Install the package:    <pre><code>uv pip install -e .\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#quickstart-example","title":"Quickstart Example","text":"<pre><code># Install XX\npip install xx-shell\n\n# Activate XX shell\nxx activate\n\n# Use natural language commands\nxx&gt; $ find \"all media files under 500mb\"\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>Run the following command to verify the installation: <pre><code>xx-shell --version\n</code></pre></p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues: - Ensure Python is installed correctly - Check your PATH environment variable - Verify pip/uv is up to date</p>"}]}