{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to XX Shell Documentation","text":"<p>{ width=\"200\" }</p> <p>XX Shell is a powerful command-line interface with advanced features for...</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation</li> <li>Configuration</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Command System:</li> <li>Plugin Architecture:</li> <li>Session Management:</li> </ul> <pre><code>:hidden:\ngetting-started/installation\ngetting-started/configuration\ncommands/index\ndevelopment/setup\napi/core\n</code></pre>"},{"location":"ExecutionPlan/","title":"XX Shell Mode Execution Plan","text":""},{"location":"ExecutionPlan/#development-phases","title":"Development Phases","text":""},{"location":"ExecutionPlan/#phase-1-core-functionality-2-weeks","title":"Phase 1: Core Functionality (2 weeks)","text":"<ol> <li>Project Setup</li> <li>Initialize project structure</li> <li>Set up development environment</li> <li> <p>Configure CI/CD pipeline</p> </li> <li> <p>Basic Command Interpreter</p> </li> <li>Implement natural language processing</li> <li>Create command validation system</li> <li> <p>Develop basic command translation</p> </li> <li> <p>Execution Layer</p> </li> <li>Build command execution wrapper</li> <li>Implement output capture</li> <li> <p>Create error handling system</p> </li> <li> <p>Data Storage</p> </li> <li>Design database schema</li> <li>Implement command logging</li> <li>Add metadata tracking</li> </ol>"},{"location":"ExecutionPlan/#phase-2-advanced-features-3-weeks","title":"Phase 2: Advanced Features (3 weeks)","text":"<ol> <li>Command Optimization</li> <li>Develop command analysis engine</li> <li>Implement optimization suggestions</li> <li> <p>Create command validation rules</p> </li> <li> <p>Context Management</p> </li> <li>Build context tracking system</li> <li>Implement session management</li> <li> <p>Develop command history analysis</p> </li> <li> <p>User Interface</p> </li> <li>Create interactive shell interface</li> <li>Implement command confirmation</li> <li>Develop help system</li> </ol>"},{"location":"ExecutionPlan/#phase-3-ecosystem-integration-2-weeks","title":"Phase 3: Ecosystem Integration (2 weeks)","text":"<ol> <li>Plugin System</li> <li>Design plugin architecture</li> <li>Create core plugin API</li> <li> <p>Implement basic plugins (git, docker, etc.)</p> </li> <li> <p>Cross-Platform Support</p> </li> <li>Develop platform-specific adapters</li> <li>Implement environment detection</li> <li> <p>Create compatibility layer</p> </li> <li> <p>Documentation</p> </li> <li>Write user documentation</li> <li>Create developer guide</li> <li>Generate API reference</li> </ol>"},{"location":"ExecutionPlan/#session-management-system","title":"Session Management System","text":""},{"location":"ExecutionPlan/#session-tracking","title":"Session Tracking","text":"<ol> <li>Session State Storage</li> <li>Create session state file format</li> <li>Implement state serialization</li> <li> <p>Develop state restoration</p> </li> <li> <p>Session Commands</p> </li> <li><code>xx session save</code>: Save current session state</li> <li><code>xx session load</code>: Load previous session state</li> <li> <p><code>xx session list</code>: Show available sessions</p> </li> <li> <p>Automatic State Management</p> </li> <li>Save state on exit</li> <li>Restore state on start</li> <li>Maintain session history</li> </ol>"},{"location":"ExecutionPlan/#aider-integration","title":"Aider Integration","text":"<ol> <li>Session Tracking</li> <li>Save Aider context with session</li> <li>Restore Aider state on load</li> <li> <p>Maintain Aider history</p> </li> <li> <p>Command Integration</p> </li> <li><code>xx aider start</code>: Begin Aider session</li> <li><code>xx aider stop</code>: End Aider session</li> <li> <p><code>xx aider status</code>: Show Aider state</p> </li> <li> <p>State Synchronization</p> </li> <li>Sync Aider context with XX state</li> <li>Maintain command history</li> <li>Preserve file changes</li> </ol>"},{"location":"ExecutionPlan/#milestones","title":"Milestones","text":"<ol> <li>Week 1: Core functionality prototype</li> <li>Week 3: Basic command interpreter</li> <li>Week 5: Advanced features implementation</li> <li>Week 7: Ecosystem integration</li> <li>Week 8: Final testing and documentation</li> </ol>"},{"location":"ExecutionPlan/#quality-assurance","title":"Quality Assurance","text":"<ol> <li>Testing Strategy</li> <li>Unit tests for core components</li> <li>Integration tests for command execution</li> <li> <p>End-to-end tests for user workflows</p> </li> <li> <p>Code Quality</p> </li> <li>Implement linting</li> <li>Enforce code style</li> <li> <p>Maintain test coverage</p> </li> <li> <p>Documentation</p> </li> <li>Keep documentation updated</li> <li>Generate API documentation</li> <li>Maintain changelog</li> </ol>"},{"location":"ExecutionPlan/#deployment-strategy","title":"Deployment Strategy","text":"<ol> <li>Package Distribution</li> <li>Create PyPI package</li> <li>Implement versioning</li> <li> <p>Set up automated releases</p> </li> <li> <p>Installation Methods</p> </li> <li>pip installation</li> <li>Homebrew formula</li> <li> <p>Linux package manager</p> </li> <li> <p>Update System</p> </li> <li>Implement version checking</li> <li>Create update mechanism</li> <li>Maintain backward compatibility</li> </ol>"},{"location":"InitialProposal/","title":"XX Shell Mode Project Proposal","text":""},{"location":"InitialProposal/#overview","title":"Overview","text":"<p>XX is an intelligent shell enhancement that combines command execution with AI-assisted command analysis and optimization. It acts as a transparent layer between the user and their shell, providing:</p> <ol> <li>Command Recording: Automatically logs all shell commands and their outputs</li> <li>Intent Understanding: Interprets natural language commands into executable shell commands</li> <li>Execution Optimization: Suggests improved versions of commands</li> <li>Historical Analysis: Provides insights into command patterns and usage</li> </ol>"},{"location":"InitialProposal/#key-features","title":"Key Features","text":""},{"location":"InitialProposal/#intelligent-command-interpretation","title":"Intelligent Command Interpretation","text":"<ul> <li>Translates natural language into shell commands</li> <li>Handles complex command chaining and pipelines</li> <li>Suggests optimized command alternatives</li> <li>Provides real-time feedback and confirmation</li> </ul>"},{"location":"InitialProposal/#comprehensive-command-recording","title":"Comprehensive Command Recording","text":"<ul> <li>Logs all commands and their outputs</li> <li>Stores metadata (timestamp, working directory, environment)</li> <li>Maintains command context for better suggestions</li> <li>Enables post-execution analysis</li> </ul>"},{"location":"InitialProposal/#execution-environment","title":"Execution Environment","text":"<ul> <li>Works with existing shell environments (bash, zsh, fish)</li> <li>Maintains full shell functionality</li> <li>Preserves existing aliases and configurations</li> <li>Operates transparently with minimal overhead</li> </ul>"},{"location":"InitialProposal/#analysis-tools","title":"Analysis Tools","text":"<ul> <li>Command usage statistics</li> <li>Performance optimization suggestions</li> <li>Common mistake detection</li> <li>Automated documentation generation</li> </ul>"},{"location":"InitialProposal/#technical-architecture","title":"Technical Architecture","text":""},{"location":"InitialProposal/#core-components","title":"Core Components","text":"<ol> <li>Command Interpreter</li> <li>Natural language processing</li> <li>Command validation</li> <li> <p>Optimization suggestions</p> </li> <li> <p>Execution Layer</p> </li> <li>Command execution</li> <li>Output capture</li> <li> <p>Error handling</p> </li> <li> <p>Data Storage</p> </li> <li>Command history database</li> <li>Output storage</li> <li> <p>Metadata tracking</p> </li> <li> <p>Analysis Engine</p> </li> <li>Usage pattern detection</li> <li>Performance analysis</li> <li>Security auditing</li> </ol>"},{"location":"InitialProposal/#installation-and-usage","title":"Installation and Usage","text":""},{"location":"InitialProposal/#quickstart","title":"Quickstart","text":"<pre><code># Install XX\npip install xx-shell\n\n# Activate XX shell\nxx activate\n\n# Use natural language commands\nxx&gt; $ find \"all media files under 500mb\"\n</code></pre>"},{"location":"InitialProposal/#example-workflow","title":"Example Workflow","text":"<pre><code>xx&gt; $ compress \"all log files older than 30 days\"\n[xx] Command Proposed:\nfind /var/log -name \"*.log\" -mtime +30 -exec gzip {} \\;\nRun command? (yes/no) [yes]\n</code></pre>"},{"location":"InitialProposal/#development-roadmap","title":"Development Roadmap","text":""},{"location":"InitialProposal/#phase-1-core-functionality","title":"Phase 1: Core Functionality","text":"<ul> <li>Basic command interpretation</li> <li>Command execution and logging</li> <li>Simple natural language processing</li> </ul>"},{"location":"InitialProposal/#phase-2-advanced-features","title":"Phase 2: Advanced Features","text":"<ul> <li>Command optimization</li> <li>Context-aware suggestions</li> <li>Output analysis</li> </ul>"},{"location":"InitialProposal/#phase-3-ecosystem-integration","title":"Phase 3: Ecosystem Integration","text":"<ul> <li>Plugin system for custom commands</li> <li>Integration with common tools (docker, git, etc.)</li> <li>Cross-platform support</li> </ul>"},{"location":"InitialProposal/#comparison-with-aider","title":"Comparison with Aider","text":"<p>While inspired by Aider's AI-assisted development approach, XX focuses on: - General system administration rather than software development - Real-time command execution instead of code editing - Shell command optimization rather than code generation - System-wide usage patterns instead of project-specific patterns</p>"},{"location":"InitialProposal/#potential-applications","title":"Potential Applications","text":"<ul> <li>System administration automation</li> <li>Developer productivity enhancement</li> <li>IT training and education</li> <li>System auditing and compliance</li> <li>Personal productivity tracking</li> </ul>"},{"location":"aider_guide/","title":"Aider AI Pair Programming Guide","text":""},{"location":"aider_guide/#overview","title":"Overview","text":"<p>Aider is an AI pair programming tool that integrates with LLMs to assist with coding tasks. It works directly with your git repository and supports multiple programming languages.</p>"},{"location":"aider_guide/#key-features","title":"Key Features","text":"<ul> <li>Git Integration: Automatically commits changes with meaningful messages</li> <li>Multi-file Editing: Handles complex changes across multiple files</li> <li>IDE Support: Works with VS Code, PyCharm, and other popular editors</li> <li>Voice Coding: Supports voice-to-code capabilities</li> <li>LLM Support: Compatible with Claude, GPT-4, and other models</li> </ul>"},{"location":"aider_guide/#installation","title":"Installation","text":"<pre><code>pip install aider-install\naider-install\n</code></pre>"},{"location":"aider_guide/#configuration","title":"Configuration","text":"<p>Set up your API key: <pre><code>export ANTHROPIC_API_KEY=\"your-api-key\"\nexport OPENAI_API_KEY=\"your-api-key\"\n</code></pre></p>"},{"location":"aider_guide/#basic-usage","title":"Basic Usage","text":"<p>Start Aider with your preferred model: <pre><code>aider --model sonnet\naider --model gpt-4\n</code></pre></p>"},{"location":"aider_guide/#common-commands","title":"Common Commands","text":"<ul> <li><code>/add &lt;file&gt;</code>: Add files to the chat context</li> <li><code>/drop &lt;file&gt;</code>: Remove files from context</li> <li><code>/commit</code>: Commit changes with AI-generated message</li> <li><code>/diff</code>: Show pending changes</li> <li><code>/help</code>: Show available commands</li> <li><code>/multi</code> or <code>/m</code>: Enter multiline input mode (type END to finish)</li> </ul>"},{"location":"aider_guide/#multiline-mode","title":"Multiline Mode","text":"<p>Use multiline mode for: - Writing longer code blocks - Providing detailed instructions - Creating complex data structures - Writing documentation or comments</p> <p>Example: <pre><code>/multi\ndef my_function():\n    print(\"This is a multiline input\")\n    return 42\nEND\n</code></pre></p> <p>To cancel multiline input, press Ctrl+C</p>"},{"location":"aider_guide/#best-practices","title":"Best Practices","text":"<ol> <li>Start with small, focused tasks</li> <li>Use <code>/add</code> to provide relevant context</li> <li>Review changes before committing</li> <li>Use voice coding for rapid prototyping</li> <li>Combine with MCP for enhanced LLM integration</li> </ol>"},{"location":"aider_guide/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Connection Issues: Verify API keys and network connectivity</li> <li>Model Errors: Try switching models or restarting Aider</li> <li>File Conflicts: Use <code>/drop</code> to remove conflicting files</li> <li>Performance: Use Claude Sonnet for faster responses</li> </ul>"},{"location":"aider_guide/#resources","title":"Resources","text":"<ul> <li>Official Documentation</li> <li>GitHub Repository</li> <li>MCP Integration Guide</li> </ul>"},{"location":"coding_conventions/","title":"XX Shell Mode Coding Conventions","text":""},{"location":"coding_conventions/#project-structure","title":"Project Structure","text":"<ul> <li>Use src-layout pattern with <code>src/xx_shell</code> as main package</li> <li>Separate modules for:</li> <li><code>core/</code>: Core interpreter and execution logic</li> <li><code>commands/</code>: Command implementations</li> <li><code>plugins/</code>: Plugin system components</li> <li><code>session/</code>: Session management</li> <li><code>ui/</code>: User interface components</li> <li>Maintain dedicated directories for:</li> <li><code>tests/</code>: Unit and integration tests</li> <li><code>docs/</code>: Project documentation</li> <li><code>scripts/</code>: Development and build scripts</li> </ul>"},{"location":"coding_conventions/#development-environment","title":"Development Environment","text":""},{"location":"coding_conventions/#uv-integration","title":"UV Integration","text":"<ul> <li>Use <code>uv</code> for package management</li> <li>Create virtual environment: <code>uv venv .venv</code></li> <li>Install dependencies: <code>uv pip install -r requirements.txt</code></li> <li>Generate requirements: <code>uv pip freeze &gt; requirements.txt</code></li> </ul>"},{"location":"coding_conventions/#testing","title":"Testing","text":""},{"location":"coding_conventions/#pytest-framework","title":"pytest Framework","text":"<ul> <li>Write tests in <code>tests/</code> directory with mirror structure</li> <li>Use fixtures for command execution setup</li> <li>Include tests for:</li> <li>Command parsing and validation</li> <li>Session state management</li> <li>Plugin system integration</li> <li>Cross-platform compatibility</li> </ul>"},{"location":"coding_conventions/#documentation","title":"Documentation","text":""},{"location":"coding_conventions/#tools","title":"Tools","text":"<ul> <li>Use Sphinx for API documentation</li> <li>MkDocs for user documentation</li> <li>Write docstrings in Google style</li> <li>Include examples in docstrings</li> <li>Document all public APIs and commands</li> </ul>"},{"location":"coding_conventions/#code-quality","title":"Code Quality","text":"<ul> <li>Use pre-commit hooks for:</li> <li>Black formatting</li> <li>isort imports</li> <li>flake8 linting</li> <li>mypy type checking</li> <li>Follow PEP 8 with exceptions:</li> <li>Allow line length up to 100 characters</li> <li>Use descriptive variable names</li> <li>Prefer explicit over implicit</li> </ul>"},{"location":"coding_conventions/#session-management","title":"Session Management","text":""},{"location":"coding_conventions/#code-organization","title":"Code Organization","text":"<ul> <li>Store session state in <code>~/.xx/sessions/</code></li> <li>Use JSON format for session files</li> <li>Implement session classes in <code>session/</code> module</li> <li>Include versioning in session format</li> </ul>"},{"location":"coding_conventions/#error-handling","title":"Error Handling","text":"<ul> <li>Use custom exceptions for session errors</li> <li>Implement proper cleanup on errors</li> <li>Include detailed error messages</li> <li>Maintain backward compatibility</li> </ul>"},{"location":"coding_conventions/#command-implementation","title":"Command Implementation","text":""},{"location":"coding_conventions/#style-guide","title":"Style Guide","text":"<ul> <li>Use snake_case for command names</li> <li>Implement commands as classes</li> <li>Include help text as class docstring</li> <li>Use type hints for command parameters</li> <li>Implement input validation</li> </ul>"},{"location":"coding_conventions/#plugin-system","title":"Plugin System","text":""},{"location":"coding_conventions/#development-guidelines","title":"Development Guidelines","text":"<ul> <li>Use plugin base class from <code>plugins/base.py</code></li> <li>Implement required interface methods</li> <li>Include plugin metadata</li> <li>Document plugin configuration</li> <li>Handle errors gracefully</li> </ul>"},{"location":"coding_conventions/#version-control","title":"Version Control","text":"<ul> <li>Use conventional commits</li> <li>Include issue references in commit messages</li> <li>Create feature branches</li> <li>Review code before merging</li> <li>Tag releases with semantic versioning</li> </ul>"},{"location":"features/","title":"XX Shell Features","text":""},{"location":"features/#intelligent-command-interpretation","title":"Intelligent Command Interpretation","text":"<ul> <li>Translates natural language into shell commands</li> <li>Handles complex command chaining and pipelines</li> <li>Suggests optimized command alternatives</li> <li>Provides real-time feedback and confirmation</li> </ul>"},{"location":"features/#comprehensive-command-recording","title":"Comprehensive Command Recording","text":"<ul> <li>Logs all commands and their outputs</li> <li>Stores metadata (timestamp, working directory, environment)</li> <li>Maintains command context for better suggestions</li> <li>Enables post-execution analysis</li> </ul>"},{"location":"features/#execution-environment","title":"Execution Environment","text":"<ul> <li>Works with existing shell environments (bash, zsh, fish)</li> <li>Maintains full shell functionality</li> <li>Preserves existing aliases and configurations</li> <li>Operates transparently with minimal overhead</li> </ul>"},{"location":"features/#analysis-tools","title":"Analysis Tools","text":"<ul> <li>Command usage statistics</li> <li>Performance optimization suggestions</li> <li>Common mistake detection</li> <li>Automated documentation generation</li> </ul>"},{"location":"features/#ai-powered-assistance","title":"AI-Powered Assistance","text":"<ul> <li>Context-aware command suggestions</li> <li>Natural language processing for commands</li> <li>Intelligent error correction and guidance</li> </ul>"},{"location":"features/#extensible-architecture","title":"Extensible Architecture","text":"<ul> <li>Plugin system for custom functionality</li> <li>Integrated package management</li> <li>Cross-platform compatibility</li> </ul>"},{"location":"features/#mcp-integration","title":"MCP Integration","text":"<ul> <li>Native support for Model Context Protocol</li> <li>Seamless LLM integration</li> <li>Standardized access to data sources and tools</li> </ul>"},{"location":"mcp_python_sdk/","title":"Model Context Protocol (MCP) Python SDK","text":""},{"location":"mcp_python_sdk/#overview","title":"Overview","text":"<p>The MCP Python SDK provides tools to build MCP servers and clients in Python. It enables seamless integration with LLMs and standardized access to data sources and tools.</p>"},{"location":"mcp_python_sdk/#key-features","title":"Key Features","text":"<ul> <li>Server Development: Build MCP servers to expose data and tools to LLMs</li> <li>Client Development: Create MCP clients to connect to MCP servers</li> <li>Pre-built Integrations: Use existing integrations for common data sources and tools</li> <li>Secure Data Access: Follow best practices for securing data within your infrastructure</li> <li>XX Shell Integration: Native support for XX Shell Mode commands and plugins</li> </ul>"},{"location":"mcp_python_sdk/#installation","title":"Installation","text":"<pre><code>pip install mcp-python-sdk\n</code></pre>"},{"location":"mcp_python_sdk/#quickstart","title":"Quickstart","text":""},{"location":"mcp_python_sdk/#building-a-server","title":"Building a Server","text":"<pre><code>from mcp import Server, Resource\nfrom xx_shell.plugins import MCPPlugin\n\nclass MyServer(Server, MCPPlugin):\n    @Resource\n    def my_resource(self):\n        return {\"data\": \"example\"}\n\nserver = MyServer()\nserver.run()\n</code></pre>"},{"location":"mcp_python_sdk/#building-a-client","title":"Building a Client","text":"<pre><code>from mcp import Client\nfrom xx_shell.commands import MCPCommand\n\nclient = Client(\"http://localhost:8000\")\nresponse = client.get_resource(\"my_resource\")\nprint(response)\n</code></pre>"},{"location":"mcp_python_sdk/#xx-shell-integration","title":"XX Shell Integration","text":""},{"location":"mcp_python_sdk/#command-interface","title":"Command Interface","text":"<ul> <li><code>xx mcp start</code>: Start MCP server</li> <li><code>xx mcp stop</code>: Stop MCP server</li> <li><code>xx mcp status</code>: Show server status</li> <li><code>xx mcp list</code>: List available servers</li> </ul>"},{"location":"mcp_python_sdk/#plugin-development","title":"Plugin Development","text":"<ul> <li>Use <code>MCPPlugin</code> base class</li> <li>Implement required MCP interfaces</li> <li>Include resource registration</li> </ul>"},{"location":"mcp_python_sdk/#documentation","title":"Documentation","text":"<ul> <li>GitHub Repository</li> <li>API Reference (Link to detailed API docs)</li> <li>XX Shell Integration Guide</li> </ul>"},{"location":"mcp_specification/","title":"Model Context Protocol (MCP) Specification","text":""},{"location":"mcp_specification/#overview","title":"Overview","text":"<p>MCP is an open protocol that standardizes how applications provide context to LLMs. It follows a client-server architecture and enables flexible integration with data sources and tools.</p>"},{"location":"mcp_specification/#core-concepts","title":"Core Concepts","text":""},{"location":"mcp_specification/#architecture","title":"Architecture","text":"<ul> <li>MCP Hosts: Applications like Claude Desktop or IDEs that use MCP</li> <li>MCP Clients: Protocol clients that connect to MCP servers</li> <li>MCP Servers: Lightweight programs exposing capabilities through MCP</li> <li>Local Data Sources: Files, databases, and services accessible by MCP servers</li> <li>Remote Services: External systems (e.g., APIs) connected via MCP</li> <li>XX Shell Integration: Native support for XX Shell Mode commands and plugins</li> </ul>"},{"location":"mcp_specification/#resources","title":"Resources","text":"<ul> <li>Expose data and content from servers to LLMs</li> <li>Defined using the <code>@Resource</code> decorator in the Python SDK</li> <li>Integrated with xx_shell command system</li> </ul>"},{"location":"mcp_specification/#prompts","title":"Prompts","text":"<ul> <li>Reusable prompt templates and workflows</li> <li>Enable consistent interactions with LLMs</li> <li>Integrated with xx_shell session management</li> </ul>"},{"location":"mcp_specification/#tools","title":"Tools","text":"<ul> <li>Allow LLMs to perform actions through servers</li> <li>Examples: API calls, database queries, file operations</li> <li>Integrated with xx_shell plugin system</li> </ul>"},{"location":"mcp_specification/#sampling","title":"Sampling","text":"<ul> <li>Servers can request completions from LLMs</li> <li>Supports dynamic context generation</li> <li>Integrated with xx_shell command execution</li> </ul>"},{"location":"mcp_specification/#transports","title":"Transports","text":"<ul> <li>Communication mechanism between clients and servers</li> <li>Supports HTTP, WebSocket, and other protocols</li> <li>Integrated with xx_shell networking stack</li> </ul>"},{"location":"mcp_specification/#ai-assisted-development","title":"AI-Assisted Development","text":"<p>MCP servers and clients can be developed using AI pair programming tools like Aider. This enables: - Rapid prototyping of MCP resources - AI-assisted debugging and testing - Automated documentation updates - Efficient refactoring of MCP implementations - Seamless integration with xx_shell development tools</p>"},{"location":"mcp_specification/#specification-details","title":"Specification Details","text":"<ul> <li>Full Specification</li> <li>GitHub Repository</li> <li>XX Shell Integration Guide</li> </ul>"},{"location":"uv_project_management/","title":"Project Management with UV","text":""},{"location":"uv_project_management/#overview","title":"Overview","text":"<p><code>uv</code> is a fast Python package and project manager written in Rust. It replaces tools like <code>pip</code>, <code>pip-tools</code>, <code>pipx</code>, and <code>poetry</code> while being significantly faster.</p>"},{"location":"uv_project_management/#key-features","title":"Key Features","text":"<ul> <li>Package Management: Install, uninstall, and manage Python packages.</li> <li>Virtual Environments: Create and manage isolated Python environments.</li> <li>Dependency Resolution: Fast and reliable dependency resolution.</li> <li>Project Initialization: Set up new Python projects quickly.</li> <li>Script Support: Run Python scripts with ease.</li> </ul>"},{"location":"uv_project_management/#installation","title":"Installation","text":"<pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"uv_project_management/#quickstart","title":"Quickstart","text":""},{"location":"uv_project_management/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<pre><code>uv venv\n</code></pre>"},{"location":"uv_project_management/#install-packages","title":"Install Packages","text":"<pre><code>uv pip install &lt;package&gt;\n</code></pre>"},{"location":"uv_project_management/#freeze-requirements","title":"Freeze Requirements","text":"<pre><code>uv pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"uv_project_management/#run-a-script","title":"Run a Script","text":"<pre><code>uv run script.py\n</code></pre>"},{"location":"uv_project_management/#advanced-usage","title":"Advanced Usage","text":""},{"location":"uv_project_management/#dependency-management","title":"Dependency Management","text":"<ul> <li>Install from <code>requirements.txt</code>:   <pre><code>uv pip install -r requirements.txt\n</code></pre></li> <li>Upgrade Packages:   <pre><code>uv pip install --upgrade &lt;package&gt;\n</code></pre></li> </ul>"},{"location":"uv_project_management/#project-initialization","title":"Project Initialization","text":"<ul> <li>Create a New Project:   <pre><code>uv init &lt;project_name&gt;\n</code></pre></li> </ul>"},{"location":"uv_project_management/#script-execution","title":"Script Execution","text":"<ul> <li>Run a Script with Arguments:   <pre><code>uv run script.py --arg1 value1 --arg2 value2\n</code></pre></li> </ul>"},{"location":"uv_project_management/#documentation","title":"Documentation","text":"<ul> <li>Official Documentation</li> <li>GitHub Repository</li> </ul>"},{"location":"xx_mcp_integration/","title":"XX Shell Mode MCP Integration Guide","text":""},{"location":"xx_mcp_integration/#overview","title":"Overview","text":"<p>This guide explains how to integrate MCP with XX Shell Mode, including server management, client integration, and plugin development.</p>"},{"location":"xx_mcp_integration/#server-management","title":"Server Management","text":""},{"location":"xx_mcp_integration/#starting-a-server","title":"Starting a Server","text":"<pre><code>xx mcp start --config ~/.xx/mcp/my_server.yaml\n</code></pre>"},{"location":"xx_mcp_integration/#stopping-a-server","title":"Stopping a Server","text":"<pre><code>xx mcp stop my_server\n</code></pre>"},{"location":"xx_mcp_integration/#listing-servers","title":"Listing Servers","text":"<pre><code>xx mcp list\n</code></pre>"},{"location":"xx_mcp_integration/#client-integration","title":"Client Integration","text":""},{"location":"xx_mcp_integration/#connecting-to-a-server","title":"Connecting to a Server","text":"<pre><code>xx mcp connect http://localhost:8000\n</code></pre>"},{"location":"xx_mcp_integration/#executing-queries","title":"Executing Queries","text":"<pre><code>xx mcp query my_resource\n</code></pre>"},{"location":"xx_mcp_integration/#listing-resources","title":"Listing Resources","text":"<pre><code>xx mcp resources\n</code></pre>"},{"location":"xx_mcp_integration/#plugin-development","title":"Plugin Development","text":""},{"location":"xx_mcp_integration/#creating-a-plugin","title":"Creating a Plugin","text":"<pre><code>from xx_shell.plugins import MCPPlugin\nfrom mcp import Resource\n\nclass MyPlugin(MCPPlugin):\n    @Resource\n    def my_resource(self):\n        return {\"data\": \"example\"}\n</code></pre>"},{"location":"xx_mcp_integration/#registering-resources","title":"Registering Resources","text":"<pre><code>class MyPlugin(MCPPlugin):\n    def register_resources(self):\n        self.register_resource(\"my_resource\", self.my_resource)\n</code></pre>"},{"location":"xx_mcp_integration/#error-handling","title":"Error Handling","text":"<pre><code>class MyPlugin(MCPPlugin):\n    def handle_error(self, error):\n        self.log.error(f\"Error in plugin: {error}\")\n</code></pre>"},{"location":"xx_mcp_integration/#session-management","title":"Session Management","text":""},{"location":"xx_mcp_integration/#saving-session-state","title":"Saving Session State","text":"<pre><code>xx session save\n</code></pre>"},{"location":"xx_mcp_integration/#loading-session-state","title":"Loading Session State","text":"<pre><code>xx session load\n</code></pre>"},{"location":"xx_mcp_integration/#listing-sessions","title":"Listing Sessions","text":"<pre><code>xx session list\n</code></pre>"},{"location":"xx_mcp_integration/#documentation","title":"Documentation","text":"<ul> <li>MCP Python SDK Guide</li> <li>MCP Specification</li> <li>XX Shell Documentation</li> </ul>"},{"location":"xx_mcp_integration/#xx-shell-mode-mcp-integration-guide_1","title":"XX Shell Mode MCP Integration Guide","text":""},{"location":"xx_mcp_integration/#overview_1","title":"Overview","text":"<p>This guide explains how to integrate MCP with XX Shell Mode, including server management, client integration, and plugin development.</p>"},{"location":"xx_mcp_integration/#server-management_1","title":"Server Management","text":""},{"location":"xx_mcp_integration/#starting-a-server_1","title":"Starting a Server","text":"<pre><code>xx mcp start --config ~/.xx/mcp/my_server.yaml\n</code></pre>"},{"location":"xx_mcp_integration/#stopping-a-server_1","title":"Stopping a Server","text":"<pre><code>xx mcp stop my_server\n</code></pre>"},{"location":"xx_mcp_integration/#listing-servers_1","title":"Listing Servers","text":"<pre><code>xx mcp list\n</code></pre>"},{"location":"xx_mcp_integration/#client-integration_1","title":"Client Integration","text":""},{"location":"xx_mcp_integration/#connecting-to-a-server_1","title":"Connecting to a Server","text":"<pre><code>xx mcp connect http://localhost:8000\n</code></pre>"},{"location":"xx_mcp_integration/#executing-queries_1","title":"Executing Queries","text":"<pre><code>xx mcp query my_resource\n</code></pre>"},{"location":"xx_mcp_integration/#listing-resources_1","title":"Listing Resources","text":"<pre><code>xx mcp resources\n</code></pre>"},{"location":"xx_mcp_integration/#plugin-development_1","title":"Plugin Development","text":""},{"location":"xx_mcp_integration/#creating-a-plugin_1","title":"Creating a Plugin","text":"<pre><code>from xx_shell.plugins import MCPPlugin\nfrom mcp import Resource\n\nclass MyPlugin(MCPPlugin):\n    @Resource\n    def my_resource(self):\n        return {\"data\": \"example\"}\n</code></pre>"},{"location":"xx_mcp_integration/#registering-resources_1","title":"Registering Resources","text":"<pre><code>class MyPlugin(MCPPlugin):\n    def register_resources(self):\n        self.register_resource(\"my_resource\", self.my_resource)\n</code></pre>"},{"location":"xx_mcp_integration/#error-handling_1","title":"Error Handling","text":"<pre><code>class MyPlugin(MCPPlugin):\n    def handle_error(self, error):\n        self.log.error(f\"Error in plugin: {error}\")\n</code></pre>"},{"location":"xx_mcp_integration/#session-management_1","title":"Session Management","text":""},{"location":"xx_mcp_integration/#saving-session-state_1","title":"Saving Session State","text":"<pre><code>xx session save\n</code></pre>"},{"location":"xx_mcp_integration/#loading-session-state_1","title":"Loading Session State","text":"<pre><code>xx session load\n</code></pre>"},{"location":"xx_mcp_integration/#listing-sessions_1","title":"Listing Sessions","text":"<pre><code>xx session list\n</code></pre>"},{"location":"xx_mcp_integration/#documentation_1","title":"Documentation","text":"<ul> <li>MCP Python SDK Guide</li> <li>MCP Specification</li> <li>XX Shell Documentation</li> </ul>"},{"location":"api/core/","title":"Core API Reference","text":""},{"location":"api/core/#classes","title":"Classes","text":""},{"location":"api/core/#shell","title":"Shell","text":"<p>Main shell class implementing core functionality</p> <pre><code>class Shell:\n    def __init__(self, config: dict = None):\n        \"\"\"Initialize shell with optional configuration\"\"\"\n\n    def run(self, command: str) -&gt; str:\n        \"\"\"Execute a shell command\"\"\"\n</code></pre>"},{"location":"api/core/#command","title":"Command","text":"<p>Base command class for implementing commands</p> <pre><code>class Command:\n    def __init__(self, name: str, help_text: str):\n        \"\"\"Initialize command with name and help text\"\"\"\n\n    def execute(self, args: list) -&gt; str:\n        \"\"\"Execute command with provided arguments\"\"\"\n</code></pre>"},{"location":"api/core/#functions","title":"Functions","text":""},{"location":"api/core/#parse_command","title":"parse_command","text":"<p>Parse input command string</p> <pre><code>def parse_command(input: str) -&gt; tuple[str, list]:\n    \"\"\"Parse command string into command name and arguments\"\"\"\n</code></pre>"},{"location":"api/core/#format_output","title":"format_output","text":"<p>Format command output</p> <pre><code>def format_output(output: str, style: str = \"plain\") -&gt; str:\n    \"\"\"Format command output with specified style\"\"\"\n</code></pre>"},{"location":"api/plugins/","title":"Plugin API Reference","text":""},{"location":"api/plugins/#classes","title":"Classes","text":""},{"location":"api/plugins/#plugin","title":"Plugin","text":"<p>Base plugin class</p> <pre><code>class Plugin:\n    def __init__(self, name: str, version: str):\n        \"\"\"Initialize plugin with name and version\"\"\"\n\n    def register_commands(self) -&gt; list[Command]:\n        \"\"\"Register plugin commands\"\"\"\n\n    def on_load(self):\n        \"\"\"Called when plugin is loaded\"\"\"\n</code></pre>"},{"location":"api/plugins/#pluginmanager","title":"PluginManager","text":"<p>Manage plugin lifecycle</p> <pre><code>class PluginManager:\n    def __init__(self, shell: Shell):\n        \"\"\"Initialize with reference to shell instance\"\"\"\n\n    def load_plugin(self, plugin_path: str):\n        \"\"\"Load plugin from specified path\"\"\"\n\n    def unload_plugin(self, plugin_name: str):\n        \"\"\"Unload plugin by name\"\"\"\n</code></pre>"},{"location":"api/plugins/#functions","title":"Functions","text":""},{"location":"api/plugins/#discover_plugins","title":"discover_plugins","text":"<p>Discover available plugins</p> <pre><code>def discover_plugins() -&gt; list[str]:\n    \"\"\"Find available plugins in plugin directories\"\"\"\n</code></pre>"},{"location":"api/plugins/#validate_plugin","title":"validate_plugin","text":"<p>Validate plugin metadata</p> <pre><code>def validate_plugin(plugin: Plugin) -&gt; bool:\n    \"\"\"Validate plugin implementation\"\"\"\n</code></pre>"},{"location":"api/session/","title":"Session API Reference","text":""},{"location":"api/session/#classes","title":"Classes","text":""},{"location":"api/session/#session","title":"Session","text":"<p>Manage shell session state</p> <pre><code>class Session:\n    def __init__(self, session_id: str):\n        \"\"\"Initialize session with unique ID\"\"\"\n\n    def save(self, path: str):\n        \"\"\"Save session state to file\"\"\"\n\n    def load(self, path: str):\n        \"\"\"Load session state from file\"\"\"\n</code></pre>"},{"location":"api/session/#sessionmanager","title":"SessionManager","text":"<p>Manage multiple sessions</p> <pre><code>class SessionManager:\n    def __init__(self):\n        \"\"\"Initialize session manager\"\"\"\n\n    def create_session(self) -&gt; Session:\n        \"\"\"Create new session\"\"\"\n\n    def get_session(self, session_id: str) -&gt; Session:\n        \"\"\"Get session by ID\"\"\"\n</code></pre>"},{"location":"api/session/#functions","title":"Functions","text":""},{"location":"api/session/#serialize_session","title":"serialize_session","text":"<p>Serialize session state</p> <pre><code>def serialize_session(session: Session) -&gt; str:\n    \"\"\"Convert session to JSON string\"\"\"\n</code></pre>"},{"location":"api/session/#deserialize_session","title":"deserialize_session","text":"<p>Deserialize session state</p> <pre><code>def deserialize_session(data: str) -&gt; Session:\n    \"\"\"Create session from JSON string\"\"\"\n</code></pre>"},{"location":"assets/prompts/logo_flux.1-dev/","title":"Logo flux.1 dev","text":"<p>Visual Concept: - Two bold \"X\" characters styled as sleek, modern shapes (possibly with a gradient or metallic finish) placed side by side to form XX. - Below or beside the XX, incorporate a stylized shell shape (e.g., a conch shell, a command prompt symbol like <code>&gt;_</code>, or a terminal window outline) to reference the shell environment. - The XX can be futuristic and tech-forward, using geometric fonts or slightly tilted to suggest motion and modernity.</p>"},{"location":"commands/","title":"Command Reference","text":"<p>This section documents all available commands in XX Shell, organized by category.</p>"},{"location":"commands/#core-commands","title":"Core Commands","text":"<p>Essential commands for shell operation: - <code>help</code> - Show command help - <code>exit</code> - Exit the shell - <code>version</code> - Show version information - <code>config</code> - Manage shell configuration</p>"},{"location":"commands/#plugin-commands","title":"Plugin Commands","text":"<p>Commands provided by installed plugins: - <code>plugin list</code> - List installed plugins - <code>plugin install</code> - Install new plugins - <code>plugin remove</code> - Remove installed plugins</p>"},{"location":"commands/#navigation","title":"Navigation","text":"<ul> <li>Core Commands</li> <li>Plugin Commands</li> </ul>"},{"location":"commands/core/","title":"Core Commands","text":""},{"location":"commands/core/#help","title":"help","text":"<p>Show help information for commands</p> <p>Usage: <pre><code>help [command]\n</code></pre></p>"},{"location":"commands/core/#exit","title":"exit","text":"<p>Exit the shell</p> <p>Usage: <pre><code>exit\n</code></pre></p>"},{"location":"commands/core/#version","title":"version","text":"<p>Show version information</p> <p>Usage: <pre><code>version\n</code></pre></p>"},{"location":"commands/core/#config","title":"config","text":"<p>Manage shell configuration</p> <p>Usage: <pre><code>config [get|set|list] [key] [value]\n</code></pre></p>"},{"location":"commands/plugins/","title":"Plugin Commands","text":""},{"location":"commands/plugins/#plugin-list","title":"plugin list","text":"<p>List installed plugins</p> <p>Usage: <pre><code>plugin list\n</code></pre></p>"},{"location":"commands/plugins/#plugin-install","title":"plugin install","text":"<p>Install new plugins</p> <p>Usage: <pre><code>plugin install &lt;plugin_name&gt;\n</code></pre></p>"},{"location":"commands/plugins/#plugin-remove","title":"plugin remove","text":"<p>Remove installed plugins</p> <p>Usage: <pre><code>plugin remove &lt;plugin_name&gt;\n</code></pre></p>"},{"location":"development/contributing/","title":"Contributing Guide","text":""},{"location":"development/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork:    <pre><code>git clone https://github.com/YOUR-USERNAME/xx-shell.git\n</code></pre></li> <li>Create a feature branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Install pre-commit hooks:    <pre><code>pre-commit install\n</code></pre></li> <li>Make your changes following the coding conventions</li> <li>Run tests:    <pre><code>pytest\n</code></pre></li> <li>Commit your changes using conventional commits:    <pre><code>git commit -m \"feat: add new feature\"\ngit commit -m \"fix: resolve issue with X\"\ngit commit -m \"docs: update contributing guide\"\n</code></pre></li> </ol>"},{"location":"development/contributing/#quality-assurance","title":"Quality Assurance","text":"<ol> <li>Testing Strategy</li> <li>Unit tests for core components</li> <li>Integration tests for command execution</li> <li> <p>End-to-end tests for user workflows</p> </li> <li> <p>Code Quality</p> </li> <li>Implement linting</li> <li>Enforce code style</li> <li> <p>Maintain test coverage</p> </li> <li> <p>Documentation</p> </li> <li>Keep documentation updated</li> <li>Generate API documentation</li> <li>Maintain changelog</li> </ol>"},{"location":"development/contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li>Push your branch:    <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Create a pull request</li> <li>Include:</li> <li>Description of changes</li> <li>Related issue number (if applicable)</li> <li>Test coverage information</li> <li>Documentation updates</li> </ol>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 with 100 character line length</li> <li>Use type hints for all public APIs</li> <li>Include docstrings in Google style format</li> <li>Write tests for all new features</li> </ul>"},{"location":"development/contributing/#issue-reporting","title":"Issue Reporting","text":"<ul> <li>Use the issue template</li> <li>Include:</li> <li>Steps to reproduce</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Environment details</li> </ul>"},{"location":"development/setup/","title":"Development Setup","text":""},{"location":"development/setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>UV package manager</li> <li>Git</li> </ul>"},{"location":"development/setup/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/your-org/xx-shell.git\ncd xx-shell\n</code></pre></p> </li> <li> <p>Create virtual environment:    <pre><code>uv venv .venv\n</code></pre></p> </li> <li> <p>Activate environment:    <pre><code>source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>uv pip install -r requirements.txt -r requirements-dev.txt\n</code></pre></p> </li> </ol>"},{"location":"development/setup/#development-tools","title":"Development Tools","text":"<ul> <li>Formatting: <code>black</code> and <code>isort</code></li> <li>Linting: <code>flake8</code></li> <li>Type checking: <code>mypy</code></li> <li>Testing: <code>pytest</code></li> </ul>"},{"location":"development/setup/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Install pre-commit hooks: <pre><code>pre-commit install\n</code></pre></p>"},{"location":"development/setup/#running-tests","title":"Running Tests","text":"<p>Run all tests: <pre><code>pytest\n</code></pre></p> <p>Run tests with coverage: <pre><code>pytest --cov\n</code></pre></p>"},{"location":"development/setup/#development-roadmap","title":"Development Roadmap","text":""},{"location":"development/setup/#phase-1-core-functionality-2-weeks","title":"Phase 1: Core Functionality (2 weeks)","text":"<ul> <li>Basic command interpreter</li> <li>Execution layer</li> <li>Data storage</li> </ul>"},{"location":"development/setup/#phase-2-advanced-features-3-weeks","title":"Phase 2: Advanced Features (3 weeks)","text":"<ul> <li>Command optimization</li> <li>Context management</li> <li>User interface</li> </ul>"},{"location":"development/setup/#phase-3-ecosystem-integration-2-weeks","title":"Phase 3: Ecosystem Integration (2 weeks)","text":"<ul> <li>Plugin system</li> <li>Cross-platform support</li> <li>Documentation</li> </ul>"},{"location":"development/testing/","title":"Testing Guide","text":""},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<ul> <li>Unit tests in <code>tests/unit/</code></li> <li>Integration tests in <code>tests/integration/</code></li> <li>End-to-end tests in <code>tests/e2e/</code></li> </ul>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":"<p>Run all tests: <pre><code>pytest\n</code></pre></p> <p>Run specific test category: <pre><code>pytest tests/unit/\npytest tests/integration/\npytest tests/e2e/\n</code></pre></p>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>Generate coverage report: <pre><code>pytest --cov\n</code></pre></p> <p>View HTML coverage report: <pre><code>pytest --cov --cov-report=html\n</code></pre></p>"},{"location":"development/testing/#parallel-testing","title":"Parallel Testing","text":"<p>Run tests in parallel: <pre><code>pytest -n auto\n</code></pre></p>"},{"location":"development/testing/#common-test-patterns","title":"Common Test Patterns","text":""},{"location":"development/testing/#mocking","title":"Mocking","text":"<p>Use pytest-mock for mocking: <pre><code>def test_something(mocker):\n    mock_func = mocker.patch('module.function')\n    # test code\n</code></pre></p>"},{"location":"development/testing/#async-tests","title":"Async Tests","text":"<p>Use pytest-asyncio for async tests: <pre><code>@pytest.mark.asyncio\nasync def test_async_function():\n    result = await async_function()\n    assert result == expected\n</code></pre></p>"},{"location":"development/testing/#test-configuration","title":"Test Configuration","text":"<ul> <li>Configured in <code>pytest.ini</code></li> <li>Includes default markers and options</li> <li>Supports parallel execution</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":""},{"location":"getting-started/configuration/#configuration-files","title":"Configuration Files","text":"<p>XX Shell uses the following configuration files: - <code>~/.xx/config.yaml</code>: Main configuration file - <code>~/.xx/plugins/</code>: Directory for plugin configurations - <code>~/.xx/sessions/</code>: Directory for session files</p>"},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":"<p>Example configuration file: <pre><code># ~/.xx/config.yaml\ncore:\n  prompt: \"xx&gt; \"\n  history_size: 1000\n  auto_update: true\n\nui:\n  theme: dark\n  syntax_highlighting: true\n  show_line_numbers: true\n\nplugins:\n  enabled:\n    - mcp\n    - git\n    - docker\n</code></pre></p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>You can override configuration settings using environment variables: - <code>XX_PROMPT</code>: Override the shell prompt - <code>XX_THEME</code>: Set the UI theme (light/dark) - <code>XX_HISTORY_SIZE</code>: Set command history size - <code>XX_AUTO_UPDATE</code>: Enable/disable auto-update</p>"},{"location":"getting-started/configuration/#plugin-configuration","title":"Plugin Configuration","text":"<p>Each plugin can have its own configuration file: <pre><code># ~/.xx/plugins/mcp.yaml\nmcp:\n  servers:\n    - name: local\n      url: http://localhost:8000\n    - name: production\n      url: https://mcp.example.com\n</code></pre></p>"},{"location":"getting-started/configuration/#session-configuration","title":"Session Configuration","text":"<p>Session-specific settings can be stored in session files: <pre><code># ~/.xx/sessions/default.yaml\nenvironment:\n  variables:\n    API_KEY: \"your-api-key\"\n  working_directory: \"/projects/my-project\"\n</code></pre></p>"},{"location":"getting-started/configuration/#reloading-configuration","title":"Reloading Configuration","text":"<p>To reload configuration without restarting: <pre><code>xx-shell config reload\n</code></pre></p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>pip or uv package manager</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install xx-shell\n</code></pre>"},{"location":"getting-started/installation/#using-uv","title":"Using uv","text":"<pre><code>uv pip install xx-shell\n</code></pre>"},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/your-org/xx-shell.git\ncd xx-shell\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>uv pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Install the package:    <pre><code>uv pip install -e .\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#quickstart-example","title":"Quickstart Example","text":"<pre><code># Install XX\npip install xx-shell\n\n# Activate XX shell\nxx activate\n\n# Use natural language commands\nxx&gt; $ find \"all media files under 500mb\"\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>Run the following command to verify the installation: <pre><code>xx-shell --version\n</code></pre></p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues: - Ensure Python is installed correctly - Check your PATH environment variable - Verify pip/uv is up to date</p>"}]}